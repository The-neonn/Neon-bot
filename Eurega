const express = require('express');
const line = require('@line/bot-sdk');
const { Client } = require('@notionhq/client');

// Line configuration
const lineConfig = {
  channelAccessToken: 'TEWSEktC8APz9Wr5Lc3/q+nqwFgDAgT7iGlonRIev/0Gu17fAVRve3HXCCQDc9++enpF3N7yGgHJxSpQrmWnBNlFS9k2HPgm3PWSvIe5SkFNQ2yuXjPn21SfCcFdPJaS3XNC/lgLrAy8R5whU9jQEgdB04t89/1O/w1cDnyilFU=',
  channelSecret: '7b9541a7343e8f661d1abdffc14b2be7',
};

// Notion configuration
const notion = new Client({ auth: 'secret_zP658OqGthTP7y7YQYUZBqHnA5iK4ARQA3kuycj7rqu' });
const databaseId = 'e223741f5c034cc3aa5555c591774898';

// Create an Express server
const app = express();

// Create a Line bot instance
const lineBot = new line.Client(lineConfig);

// Webhook endpoint for Line events
app.post('/webhook', line.middleware(lineConfig), async (req, res) => {
  try {
    const events = req.body.events;
    await Promise.all(events.map(handleEvent));
    res.status(200).end();
  } catch (err) {
    console.error(err);
    res.status(500).end();
  }
});

// Function to handle Line events
async function handleEvent(event) {
  if (event.type === 'message' && event.message.type === 'text') {
    const userId = event.source.userId;
    const message = event.message.text.toLowerCase();

    if (!event.replyToken) {
      // Ignore non-reply events (e.g., follow event)
      return;
    }

    if (message === 'check availability') {
      // Reply with a prompt to ask for the table name
      await lineBot.replyMessage(event.replyToken, {
        type: 'text',
        text: 'Which table would you like to check the availability for?',
      });
    } else if (message.startsWith('is the')) {
      // Extract the table name from the user's message
      const tableName = message.replace('is the', '').trim();

      // Check if the table is available in the Notion database
      const isTableAvailable = await checkTableAvailability(tableName);
      const replyMessage = isTableAvailable
        ? `${tableName} is available! How many people would like to order?`
        : `${tableName} is not available.`;

      await lineBot.replyMessage(event.replyToken, { type: 'text', text: replyMessage });
    } else if (!isNaN(message)) {
      // Process the message as the number of people
      const numberOfPeople = parseInt(message);
      await updateInNotion(userId, numberOfPeople);

      // Reply to the user
      const replyMessage = 'Number of people received! Thank you.';
      await lineBot.replyMessage(event.replyToken, { type: 'text', text: replyMessage });
    }
  }
}

// Function to check table availability in Notion based on table name
async function checkTableAvailability(tableName) {
  try {
    const response = await notion.databases.query({
      database_id: databaseId,
      filter: {
        property: 'Name',
        title: {
          equals: tableName,
        },
      },
    });

    return response.results.length > 0 && response.results[0].properties.Availability.select.name === 'Available';
  } catch (err) {
    console.error('Error checking table availability:', err);
    throw err;
  }
}

// Function to replace the available row with the booking row and update the availability, user, and number of people
async function updateInNotion(userId, numberOfPeople) {
  try {
    // Find the available row in the Notion database
    const response = await notion.databases.query({
      database_id: databaseId,
      filter: {
        property: 'Availability',
        select: {
          equals: 'Available',
        },
      },
    });

    if (response.results.length > 0) {
      const availableRow = response.results[0];

      // Update the properties of the available row
      await notion.pages.update({
        page_id: availableRow.id,
        properties: {
          Availability: {
            select: {
              name: 'Booked',
            },
          },
          User: {
            rich_text: [
              {
                text: {
                  content: userId,
                },
              },
            ],
          },
          Number: {
            rich_text: [
              {
                text: {
                  content: numberOfPeople.toString(),
                },
              },
            ],
          },
        },
      });
    } else {
      console.log('No available row found. Skipping update.');
    }
  } catch (err) {
    console.error('Error updating table availability and user information:', err);
    throw err;
  }
}

// Start the server
const port = 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
